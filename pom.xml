<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.luoqing</groupId>
  <artifactId>ssh</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>ssh Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.7</version>
    </dependency>

    <!--struts相关-->
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-core</artifactId>
      <version>2.3.16.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-spring-plugin</artifactId>
      <version>2.3.16.1</version>
      <exclusions>
        <exclusion>
          <artifactId>struts2-core</artifactId>
          <groupId>org.apache.struts</groupId>
        </exclusion>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.struts.xwork</groupId>
      <artifactId>xwork-core</artifactId>
      <version>2.3.16.1</version>
    </dependency>
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <version>2.3.19</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.3</version>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.3.1</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-email</artifactId>
      <version>1.3.2</version>
      <exclusions>
        <exclusion>
          <artifactId>mail</artifactId>
          <groupId>javax.mail</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4.7</version>
      <exclusions>
        <exclusion>
          <artifactId>activation</artifactId>
          <groupId>javax.activation</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp.jstl</groupId>
      <artifactId>jstl-api</artifactId>
      <version>1.2</version>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.servlet.jsp</groupId>
          <artifactId>jsp-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>taglibs</groupId>
      <artifactId>standard</artifactId>
      <version>1.1.2</version>
    </dependency>
    <!--千万注意下面两个包有版本对应的要求，我就是因为这个一直报错，说找不到JasonActionRedirectResult类，搞了一天-->
    <!--用于将Map对象转为Json对象，提供JsonObject类-->
    <dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <version>2.4</version>
      <classifier>jdk15</classifier>
      <exclusions>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <!--用于struts.xml中的json-defalut的拦截器-->
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-json-plugin</artifactId>
      <version>2.3.7</version>
      <exclusions>
        <exclusion>
          <artifactId>struts2-core</artifactId>
          <groupId>org.apache.struts</groupId>
        </exclusion>
        <exclusion>
          <artifactId>commons-lang3</artifactId>
          <groupId>org.apache.commons</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.0.2</version>
      <exclusions>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
        <exclusion>
          <artifactId>commons-codec</artifactId>
          <groupId>commons-codec</groupId>
        </exclusion>
        <exclusion>
          <artifactId>commons-codec</artifactId>
          <groupId>commons-codec</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <!--hibernate依赖-->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>5.1.10.Final</version>
      <exclusions>
        <exclusion>
          <artifactId>javassist</artifactId>
          <groupId>org.javassist</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.44</version>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-c3p0</artifactId>
      <version>5.1.4.Final</version>
      <exclusions>
        <exclusion>
          <artifactId>hibernate-core</artifactId>
          <groupId>org.hibernate</groupId>
        </exclusion>
      </exclusions>
    </dependency>
  <!--spring相关-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
      <version>2.5.6</version>
      <exclusions>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <!--设置要下载的maven插件-->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.0</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <pushChanges>true</pushChanges>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.14</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <!-- 生成配置文件 -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.3</version>
        <configuration>
          <!--默认情况会将resources中的文件编码，这里可以设置不需要编码的文件-->
          <nonFilteredFileExtensions>
            <nonFilteredFileExtension>jpg</nonFilteredFileExtension>
            <nonFilteredFileExtension>txt</nonFilteredFileExtension>
          </nonFilteredFileExtensions>
        </configuration>
        <executions>
          <!--设置将资源文件一同打包-->
          <execution>
            <id>copy-resources</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>UTF-8</encoding>
              <outputDirectory>${project.build.directory}/conf</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/</directory>
                  <includes>
                    <include>*</include>
                  </includes>
                  <filtering>true</filtering>
                  <!--it's necessary to use Profiles -->
                </resource>
              </resources>
            </configuration>
          </execution>
          <!--设置将脚本文件一同打包-->
          <!--<execution>-->
          <!--<id>copy-shell</id>-->
          <!--<phase>package</phase>-->
          <!--<goals>-->
          <!--<goal>copy-resources</goal>-->
          <!--</goals>-->
          <!--<configuration>-->
          <!--<encoding>UTF-8</encoding>-->
          <!--<outputDirectory>${project.build.directory}/</outputDirectory>-->
          <!--&lt;!&ndash;  把配置文件拷到和jar包同一个路径下 &ndash;&gt;-->
          <!--<resources>-->
          <!--<resource>-->
          <!--<directory>src/main/bin/</directory>-->
          <!--<filtering>true</filtering>-->
          <!--</resource>-->
          <!--</resources>-->
          <!--</configuration>-->
          <!--</execution>-->
        </executions>
      </plugin>
      <!--<plugin>-->
      <!-- 依赖打包 -->
      <!--<groupId>org.apache.maven.plugins</groupId>-->
      <!--<artifactId>maven-dependency-plugin</artifactId>-->
      <!--<version>2.10</version>-->
      <!--<executions>-->
      <!--<execution>-->
      <!--<id>copy-dependencies</id>-->
      <!--<phase>package</phase>-->
      <!--<goals>-->
      <!--<goal>copy-dependencies</goal>-->
      <!--</goals>-->
      <!--<configuration>-->
      <!--<outputDirectory>${project.build.directory}/lib</outputDirectory>-->
      <!--</configuration>-->
      <!--</execution>-->
      <!--</executions>-->
      <!--</plugin>-->
    </plugins>
    <finalName>ssh-${version}</finalName>
    <!--<directory>${basedir}/target</directory>-->
  </build>
  <!--首先简单介绍下 Maven 的 profile 是什么。对于人来说，profile 是指人的肖像，轮廓，比如论坛里每个人注册了帐号后，可以设置自己的 profile，放上照片，介绍等等。对于 Maven 来说又是怎样呢？整个项目定义好了项目对象模型（POM），就像论坛为每个人提供了默认的行为功能，如果我想改变我机器上的 POM 呢？这时就可以使用 profile。下面举个例子：-->
  <!--activation里面是该肖像的激活条件，这里是默认激活-->
  <profiles>
    <profile>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <id>shade</id>
      <build>
        <resources>
          <resource>
            <directory>src/main/java</directory>
            <includes>
              <include>**/*.xml</include>
            </includes>
          </resource>
        </resources>
        <plugins>
          <plugin>

            <!--这里maven-shade-plugin 将 goal shade:shade 绑定到 phase package 上。-->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>

                <configuration>
                  <!--创建一个可执行 Jar 包,并设置按照配置打包依赖包。-->
                  <transformers>
                    <transformer
                            implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <resource>reference.conf</resource>
                    </transformer>
                  </transformers>

                  <!--将项目的部分相关依赖包include/exclude掉-->
                  <!--<artifactSet>-->
                  <!--<excludes>-->
                  <!--<exclude>classworlds:classworlds</exclude>-->
                  <!--<exclude>junit:junit</exclude>-->
                  <!--<exclude>jmock:*</exclude>-->
                  <!--<exclude>*:xml-apis</exclude>-->
                  <!--<exclude>org.apache.maven:lib:tests</exclude>-->
                  <!--<exclude>log4j:log4j:jar:</exclude>-->
                  <!--</excludes>-->
                  <!--</artifactSet>-->

                  <!--将依赖的某个 Jar 包内部的类或者资源 include/exclude 掉。-->
                  <!--<filters>-->
                  <!--<filter>-->
                  <!--<artifact>*:*</artifact>-->
                  <!--<excludes>-->
                  <!--<exclude>META-INF/*.SF</exclude>-->
                  <!--<exclude>META-INF/*.DSA</exclude>-->
                  <!--<exclude>META-INF/*.RSA</exclude>-->
                  <!--</excludes>-->
                  <!--</filter>-->
                  <!--</filters>-->
                  <createDependencyReducedPom>false</createDependencyReducedPom>
                  <!--默认会生成一个Jar包和一个以 "-shaded"为结尾的uber-jar包，可以通过配置来指定uber-jar的后缀名。-->
                  <shadedArtifactAttached>false</shadedArtifactAttached>
                  <shadedClassifierName>jar-with-dependencies</shadedClassifierName>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
